-- Lax, pragmatic requirements for interactive evaluation:
--  * do not require export lists
--  * allow name shadowing
--  * do not fail when defaulting types
:seti -Wno-missing-export-lists
:seti -Wno-name-shadowing
:seti -Wwarn=type-defaults

-- Better errors
:set -ferror-spans -freverse-errors -fprint-expanded-synonyms

-- Break execution on exceptions
:set -fbreak-on-exception -fghci-hist-size=1000

-- Multiline input
:set +m

-- Display the loaded modules in the prompt
:{
prompt :: String -> [String] -> String
prompt sym [] = "\ESC[35;1m\STX" ++ sym ++ "\ESC[m\STX "
prompt sym mods =
  "\n\ESC[35;1m\STX" ++ Data.List.intercalate " " mods ++ "\n" ++ prompt sym []
:}

:set prompt-function (\ms _ -> pure $ prompt "Î»" ms)
:set prompt-cont-function (\ms _ -> pure $ prompt "|" ms)

-- Pretty output format
:def pretty (\_ -> pure ":set -interactive-print Text.Pretty.Simple.pPrint")
:def nopretty (\_ -> pure ":set -interactive-print System.IO.print")

-- Use hlint and hoogle from within GHCi
:def hoogle (\s -> pure $ ":! hoogle '" ++ s ++ "'")
